#! /bin/sh

t=__wt.$$
trap 'rm -f $t; exit 0' 0 1 2 3 13 15

# We require doxygen which may not be installed.
type doxygen > /dev/null 2>&1 || {
	echo 'skipped: doxygen not found'
	exit 0
}

. ./RELEASE

e=0
spellchk()
{
	# If aspell has been installed, run a spell check.
	type aspell > /dev/null 2>&1 || return

	(cd ../docs/src &&
	cat *.dox | aspell --mode=ccpp --lang=en --personal=./spell.ok list) |
	sort -u > $t
	test -s $t && {
		echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
		echo 'Documentation spelling notes'
		echo 'Update docs/src/spell.ok to remove warnings.'
		sed -e 's/^/	/' < $t
		echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
		e=1
	}
}

build()
{
	# Run doxygen to generate HTML documentation.
	(cd ../docs &&
	    (eval cat Doxyfile $filter ; echo "QUIET=YES") | doxygen -
	test -s doxygen.log && cat doxygen.log) > $t 2>&1
	test -s $t && {
		cat $t
		e=1
	}
}

filter="|sed '/PROJECT_NUMBER/s,=.*,=\"Version $WIREDTIGER_VERSION\",'"
while :
	do case "$1" in
	-b)     # Include the Berkeley DB cross-reference
		filter="$filter| sed 's,src/bdb-map.dox,,'"
		shift;;
	-t)     # Include the Berkeley DB cross-reference
		filter="$filter| sed '/GENERATE_TODOLIST/s,=.*,=YES,'"
		shift;;
	*)
		break;;
	esac
done

# Spell check the documentation.
spellchk

# Build the documentation.
build

exit $e
