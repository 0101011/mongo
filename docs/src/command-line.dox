/*! @page command_line Command Line Utility

WiredTiger includes a command line utility, \c wt.

@section Synopsis
<code>wt [-Vv] [-C config] [-h directory] command [command-specific arguments]</code>

@section Description
The \c wt tool is a command-line utility that provides access to
various pieces of the WiredTiger functionality.

@section Options
There are three global options:

@par <code>-C config</code>
Specify configuration strings for the ::wiredtiger_open function.
@par <code>-h directory</code>
Specify a database home directory.
@par <code>-V</code>
Display WiredTiger version and exit.
@par <code>-v</code>
Set verbose output.

The \c wt tool supports several commands.


@section utility_create wt create: create a table or file

The \c create command creates the specified \c uri with the specified
configuration.  It is equivalent to a call to WT_SESSION::create with
the specified string arguments.

@subsection utility_create_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] create [-c config] uri</code>

@subsection utility_create_options Options
The following are command-specific options for the \c create command:

@par <code>-c</code>
Include a configuration string to be passed to WT_SESSION::create.


@section utility_drop wt drop: drop a table or file

The \c drop command drops the specified \c uri.  It is equivalent to a
call to WT_SESSION::drop with the "force" configuration argument.

@subsection utility_drop_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] drop uri</code>

@subsection utility_drop_options Options
There are no command-specific options for the \c drop command.


@section utility_dump wt dump: export data in a text format

The \c dump command outputs the specified table in a portable format
which can be re-loaded into a new table using the \c load command.

See @subpage dump_formats for details of the dump file formats.

@subsection utility_dump_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] dump [-rx] [-f output] uri</code>

@subsection utility_dump_options Options
The following are command-specific options for the \c dump command:

@par <code>-f</code>
By default, the \c dump command output is written to the standard output;
the \c -f option re-directs the output to the specified file.

@par <code>-r</code>
Dump in reverse order, from largest to smallest.

@par <code>-x</code>
Dump all characters in a hexadecimal encoding (the default is to leave
printable characters unencoded).


@section utility_dumpfile wt dumpfile: dump the file in a debugging format

The \c dumpfile command dumps the specified physical file in a non-portable,
debugging format, exiting success if the file is correct, and failure if the
file is corrupted.

@subsection utility_dumpfile_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] dumpfile [-f output] file</code>

@subsection utility_dumpfile_options Options
The following are command-specific options for the \c dumpfile command:

@par <code>-f</code>
By default, the \c dumpfile command output is written to the standard
output; the \c -f option re-directs the output to the specified
file.


@section utility_load wt load: load data into a file or table

The \c load command reads the standard input for data and loads it into
a file or table, creating the file or table if it does not yet exist.
The data should be the format produced by the \c dump command; see @ref
dump_formats for details.

If the file or table already exists, data in the file or table may be
overwritten by the new data (use the \c -s option for a "safe" load).

@subsection utility_load_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] load [-as] [-f input] [-n name] [uri configuration ...]</code>

@subsection utility_load_options Options
The following are command-specific options for the \c load command:

@par <code>-a</code>
If the \c -a option is specified, record number keys in the input are
ignored and the data is appended to the object and assigned new record
number keys.  The \c -a option is only applicable when loading an object
where the primary key is a record number.

@par <code>-f</code>
By default, the \c load command reads from the standard input; the \c
-f option reads the input from the specified file.

@par <code>-n</code>
By default, the \c load command uses the file or table name taken from
the input; the \c -n option specifies a new name to be used instead.

@par <code>-s</code>
By default, input data overwrites existing data where the key/value pair
already exists in the object; the \c -s option causes any attempt to
overwrite data to fail.

Additionally, \c uri and \c configuration pairs may be specified to the
\c load command.  Each of these pairs may be used to modify the
configuration of an object in the file or table.  For each of the pairs,
the configuration string will be appended to the WT_SESSION::create call
for the object matching the uri.


@section utility_printlog wt printlog: output the database log

The \c printlog command outputs the database log.

@subsection utility_printlog_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] printlog [-p] [-f output]</code>

@subsection utility_printlog_options Options
The following are command-specific options for the \c printlog command:

@par <code>-f</code>
By default, the \c printlog command output is written to the standard
output; the \c -f option re-directs the output to the specified file.

@par <code>-p</code>
Display the log in a printable format.


@section utility_salvage wt salvage: recover data from a corrupted file

The \c salvage command salvages the specified file, discarding any data
that cannot be recovered.  Underlying files are re-written in place,
overwriting the original file contents.

@subsection utility_salvage_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] salvage [-F force] uri</code>

@subsection utility_salvage_options Options
The following are command-specific options for the \c salvage command:

@par <code>-F</code>
By default, salvage will refuse to salvage files that fail basic tests
(for example, files that don't appear to be in a WiredTiger format).
The \c -F option forces the salvage of the file, regardless.


@section utility_stat wt stat: output statistics for the specified object

The \c stat command outputs run-time statistics for the WiredTiger
engine, or, if specified, for the command-line file.

@subsection utility_stat_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] stat [-p prefix] [file]</code>

@subsection utility_stat_options Options
The following are command-specific options for the \c stat command:

@par <code>-p prefix</code>
By default, stat prints all available statistics.  The \c -p option
specifies a prefix of the statistics to be printed: all of the
statistics where the statistic's description field begins with the
argument \c prefix will be printed.


@section utility_verify wt verify: check the structural integrity of a table or file

The \c verify command verifies the specified table or file, exiting
success if the object is correct, and failure if the object is corrupted.

@subsection utility_verify_synopsis Synopsis
<code>wt [-Vv] [-C config] [-h directory] verify uri</code>

@subsection utility_verify_options Options
The \c verify command has no command-specific options.
*/
