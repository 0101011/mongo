/*-
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 2008 WiredTiger Software.  All rights reserved.
 *
 * $Id$
 */

#ifndef	__WIREDTIGER_H_
#define	__WIREDTIGER_H_

#if defined(__cplusplus)
extern "C" {
#endif

/*******************************************
 * Version information
 *******************************************/
#define	WIREDTIGER_VERSION_MAJOR	@WIREDTIGER_VERSION_MAJOR@
#define	WIREDTIGER_VERSION_MINOR	@WIREDTIGER_VERSION_MINOR@
#define	WIREDTIGER_VERSION_PATCH	@WIREDTIGER_VERSION_PATCH@
#define	WIREDTIGER_VERSION_STRING	@WIREDTIGER_VERSION_STRING@

/*******************************************
 * Required includes
 *******************************************/
@wiredtiger_includes_decl@

/*******************************************
 * Portable type names
 *******************************************/
@int8_decl@
@u_int8_decl@
@int16_decl@
@u_int16_decl@
@int32_decl@
@u_int32_decl@
@int64_decl@
@u_int64_decl@
@uintmax_t_decl@
@uintptr_t_decl@

/*******************************************
 * Forward declarations
 *******************************************/
struct __db;	typedef struct __db DB;
struct __dbc;	typedef struct __dbc DBC;
struct __dbt;	typedef struct __dbt DBT;
struct __env;	typedef struct __env ENV;
struct __idb;	typedef struct __idb IDB;
struct __idbc;	typedef struct __idbc IDBC;
struct __ienv;	typedef struct __ienv IENV;

/*******************************************
 * Errors
 *******************************************/
/*
 * User-visible error return codes.
 *  0 == success
 * >0 == hard error
 * <0 == unexpected outcome
 *
 * !!!
 * We don't want our error returns to conflict with any other package, so
 * try and use an uncommon range, specifically, -31,800 to -31,999.
 */
#define	WT_ERROR	(-31800)

/*******************************************
 * Key/data structure -- a Data-Base Thang
 *******************************************/
struct __dbt {
	void	*data;			/* data */
	size_t	 size;			/* data length */
};

/*******************************************
 * Database handle
 *******************************************/
struct __db {
	IDB *idb;			/* Private object */

	ENV *env;			/* Enclosing environment */
	IENV *ienv;			/* Private environment object */

	char *file_name;		/* Database file name */

					/* Error callback */
	void (*errcall)(const DB *, const char *);
	FILE		*errfile;	/* Error message file stream */
	const char	*errpfx;	/* Error message prefix */

	/* Getters/setters */
	void (*get_errcall)(DB *, void (**)(const DB *, const char *));
	void (*get_errfile)(DB *, FILE **);
	void (*get_errpfx)(DB *, const char **);
	void (*set_errcall)(DB *, void (*)(const DB *, const char *));
	void (*set_errfile)(DB *, FILE *);
	void (*set_errpfx)(DB *, const char *);

	/* Methods */
	int  (*destroy)(DB *, u_int32_t);
	void (*err)(DB *, int, const char *, ...);
	void (*errx)(DB *, const char *, ...);

	u_int32_t flags;
};

/*******************************************
 * Cursor handle
 *******************************************/
struct __dbc {
	IDBC *idbc;			/* Private object */

	u_int32_t flags;
};

/*******************************************
 * Database environment handle
 *******************************************/
struct __env {
	IENV *ienv;			/* Private object */

					/* Error callback */
	void (*errcall)(const ENV *, const char *);
	FILE		*errfile;	/* Error message file stream */
	const char	*errpfx;	/* Error message prefix */

	/* Getters/setters */
	void (*get_errcall)(ENV *, void (**)(const ENV *, const char *));
	void (*get_errfile)(ENV *, FILE **);
	void (*get_errpfx)(ENV *, const char **);
	void (*set_errcall)(ENV *, void (*)(const ENV *, const char *));
	void (*set_errfile)(ENV *, FILE *);
	void (*set_errpfx)(ENV *, const char *);

	/* Methods */
	int  (*destroy)(ENV *, u_int32_t);
	void (*err)(ENV *, int, const char *, ...);
	void (*errx)(ENV *, const char *, ...);

	u_int32_t flags;
};

#if defined(__cplusplus)
}
#endif
#endif /* __WIREDTIGER_H_ */
