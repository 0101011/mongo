#! /bin/sh

# Run standard scripts.
t=__wt.$$
trap 'rm -f $t *.pyc __tmp __wt.*; exit 0' 0 1 2 3 13 15

indent()
{
	$1 | 2>&1 sed -e 's/^/	/'
}

run()
{
	printf "$2 ..."
	indent "$1" > $t
	test -s $t && (echo && cat $t) || echo ' OK'
}

echo 'dist/s_all run started...'

reconf=0
while :
	do case "$1" in
	-A)	# Reconfigure the library build.
		reconf=1
		shift;;
	*)
		break;;
	esac
done

test "$reconf" -eq 0 || {
	(cd ../build_posix &&
	echo "Rebuilding GNU tools library support" &&
	indent "sh ./reconf")
}

run "python api_flags.py" "Building API flags include file"
run "python api.py" "Building API methods"
run "python api_err.py" "Building error return API"
run "python stat.py" "Building statistics support"
run "python serial.py" "Building serial function support"

run "sh ./s_prototypes" "Building function prototypes"
run "sh ./s_readme" "Building README file"
run "sh ./s_tags" "Building tags files"

run "sh ./s_copyright" "Checking copyright notices"
run "sh ./s_define" "Checking unused #defines"
run "sh ./s_longlines" "Checking for long lines"
run "sh ./s_style" "Checking style"
run "sh ./s_types" "Checking incorrect types"
run "sh ./s_whitespace" "Checking whitespace"

run "sh ./s_docs" "Generating documentation"

echo 'dist/s_all run finished'
