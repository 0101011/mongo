/*-
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 2008-2011 WiredTiger, Inc.
 *	All rights reserved.
 */

#if defined(__cplusplus)
extern "C" {
#endif

/*******************************************
 * WiredTiger public include file, and configuration control.
 *******************************************/
#include "wiredtiger.h"
#include "wiredtiger_config.h"

/*******************************************
 * WiredTiger system include files.
 *******************************************/
#include <sys/stat.h>
#include <sys/uio.h>

#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <pthread.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/*******************************************
 * WiredTiger externally maintained include files.
 *******************************************/
#include "queue.h"
#include "bitstring.h"

/*******************************************
 * Forward structure declarations for internal structures.
 *******************************************/
/*
 * DO NOT EDIT: automatically built by dist/s_typedef.
 * Forward structure declarations for internal structures: BEGIN
 */
struct __btree;
    typedef struct __btree BTREE;
struct __btree_session;
    typedef struct __btree_session BTREE_SESSION;
struct __connection;
    typedef struct __connection CONNECTION;
struct __session;
    typedef struct __session SESSION;
struct __session_buffer;
    typedef struct __session_buffer SESSION_BUFFER;
struct __wt_btree_desc;
    typedef struct __wt_btree_desc WT_BTREE_DESC;
struct __wt_btree_file_stats;
    typedef struct __wt_btree_file_stats WT_BTREE_FILE_STATS;
struct __wt_btree_stats;
    typedef struct __wt_btree_stats WT_BTREE_STATS;
struct __wt_cache;
    typedef struct __wt_cache WT_CACHE;
struct __wt_cache_stats;
    typedef struct __wt_cache_stats WT_CACHE_STATS;
struct __wt_cell;
    typedef struct __wt_cell WT_CELL;
struct __wt_col;
    typedef struct __wt_col WT_COL;
struct __wt_col_ref;
    typedef struct __wt_col_ref WT_COL_REF;
struct __wt_conn_stats;
    typedef struct __wt_conn_stats WT_CONN_STATS;
struct __wt_evict_list;
    typedef struct __wt_evict_list WT_EVICT_LIST;
struct __wt_evict_req;
    typedef struct __wt_evict_req WT_EVICT_REQ;
struct __wt_fh;
    typedef struct __wt_fh WT_FH;
struct __wt_file_stats;
    typedef struct __wt_file_stats WT_FILE_STATS;
struct __wt_free_entry;
    typedef struct __wt_free_entry WT_FREE_ENTRY;
struct __wt_hazard;
    typedef struct __wt_hazard WT_HAZARD;
struct __wt_insert;
    typedef struct __wt_insert WT_INSERT;
struct __wt_mtx;
    typedef struct __wt_mtx WT_MTX;
struct __wt_off;
    typedef struct __wt_off WT_OFF;
struct __wt_off_record;
    typedef struct __wt_off_record WT_OFF_RECORD;
struct __wt_ovfl;
    typedef struct __wt_ovfl WT_OVFL;
struct __wt_page;
    typedef struct __wt_page WT_PAGE;
struct __wt_page_disk;
    typedef struct __wt_page_disk WT_PAGE_DISK;
struct __wt_read_req;
    typedef struct __wt_read_req WT_READ_REQ;
struct __wt_ref;
    typedef struct __wt_ref WT_REF;
struct __wt_row;
    typedef struct __wt_row WT_ROW;
struct __wt_row_ref;
    typedef struct __wt_row_ref WT_ROW_REF;
struct __wt_stats;
    typedef struct __wt_stats WT_STATS;
struct __wt_update;
    typedef struct __wt_update WT_UPDATE;
struct __wt_walk;
    typedef struct __wt_walk WT_WALK;
struct __wt_walk_entry;
    typedef struct __wt_walk_entry WT_WALK_ENTRY;
/*
 * Forward structure declarations for internal structures: END
 * DO NOT EDIT: automatically built by dist/s_typedef.
 */

/*******************************************
 * WiredTiger internal include files.
 *******************************************/
#include "walk.h"
#include "btree.h"
#include "api.h"

#include "mutex.h"

#include "cache.h"
#include "config.h"
#include "debug.h"
#include "fh.h"
#include "log.h"
#include "misc.h"
#include "stat.h"

/*******************************************
 * SESSION support.
 *******************************************/
#define	S2C(session) ((CONNECTION *)(session)->iface.connection)

/*
 * SESSION_BUFFER --
 *	A structure to accumulate file changes on a per-thread basis.
 */
struct __session_buffer {
	uint32_t len;				/* Buffer original size */
	uint32_t space_avail;			/* Buffer's available memory */
	uint8_t *first_free;			/* Buffer's first free byte */

	uint16_t in;				/* Buffer chunks in use */
	uint16_t out;				/* Buffer chunks not in use */
};

/*******************************************
 * File handle information that doesn't persist.
 *******************************************/
/*
 * WT_FREE_ENTRY  --
 *	Encapsulation of an entry on the free lists.
 */
struct __wt_free_entry {
	TAILQ_ENTRY(__wt_free_entry) qa;	/* Address queue */
	TAILQ_ENTRY(__wt_free_entry) qs;	/* Size queue */

	uint32_t addr;				/* Disk offset */
	uint32_t size;				/* Size */
};

#include "serial.h"
#include "extern.h"
#include "verify_build.h"

#include "log.i"
#include "progress.i"

#if defined(__cplusplus)
}
#endif
