/*! @page cursors Cursors

Most common operations in WiredTiger are performed using cursors.  A cursor includes:

- a position within a data source
- access to key and value fields
- encoding of fields to store in the data source
- methods to navigate around and iterate through the data

@section cursor_ranges Positioning a Cursor

- how to put a cursor where you want it
- first, last, next, prev
- position after an insert
- position after errors

@todo write text

"On failure", cursor position is undetermined.  Apps that care need to either dup the cursor, or we could offer a config string that dups on all ops for you...

@section cursor_writes Inserting and Updating

@todo describe insert, update, append, insert-overwrite

@section cursor_types Cursor Types

The following are builtin cursor types:
<table>
@hrow{URI, Function}
@row{<tt>table:\<tablename\>[</tt>, ordinary table cursor}
@row{<tt>file:\<filename\></tt>, ordinary table cursor}
@row{<tt>colgroup:\<tablename\>.\<columnset\></tt>, column group cursor}
@row{<tt>index:\<tablename\>.\<index\></tt>, index cursor}
@row{<tt>join:\<cursor1\>\&\<cursor2\>[&\<cursor3\>...]</tt>, Join the contents of multiple cursors together.}
@row{<tt>config:[\<uri\>]</tt>, iterate through the configuration of an object}
@row{<tt>statistics:[file:\<filename\>]</tt>, database or file statistics (key=(string)fieldname\, data=((uint64_t)value\, (string)printvalue\, (string)description)}
</table>

@subsection cursor_table Table Cursors

@subsection cursor_file File Cursors

@subsection cursor_statistics Statistics Cursors

@section cursor_projections Projections

Cursors on tables, column groups, indices and files can return a subset of
columns.  This is done by listing the column names in parenthesis in the
<code>uri</code> parameter to WT_SESSION::open_cursor.  Only the fields from
the listed columns are returned by WT_CURSOR::get_value.

This is particularly useful with index cursors, because if all columns in the
projection are available in the index (including primary key columns, which are
the values of the index), there is no need to access any column groups.

@section cursor_ranges Restricting the Range of a Scan

@todo explain how to do a range scan

@section cursor_examples Code Samples

The code below is taken from the complete example program @ex_ref{ex_cursor.c}.

@todo expand cursor example description

@dontinclude ex_cursor.c

@skipline open_cursor

@skipline open_cursor

@skipline open_cursor

@skipline open_cursor

 */
