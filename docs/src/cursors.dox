/*! @page cursors Cursors

Common operations in WiredTiger are performed using WT_CURSOR handles.
A cursor includes:

- a position within a data source
- getter/setters for key and value fields
- encoding of fields to store in the data source
- methods to navigate within and iterate through the data

@section cursor_opening Opening a cursor

Cursors are created using the WT_SESSION::open_cursor method.  The
following are examples from the example program @ex_ref{ex_cursor.c}:

@dontinclude ex_cursor.c
@skipline open_cursor

@skipline open_cursor
@until ;

@skipline open_cursor

In addition to simple data sources, cursors in WiredTiger are used to
access projections and even created data sources such as the run-time
statistics:

@dontinclude ex_cursor.c
@skipline statistics:
@until close

@section cursor_types Cursor Types

The following are builtin cursor types:
<table>
@hrow{URI, Function}
@row{<tt>table:\<tablename\></tt>, ordinary table cursor}
@row{<tt>colgroup:\<tablename\>.\<columnset\></tt>, column group cursor}
@row{<tt>index:\<tablename\>.\<index\></tt>, index cursor}
@row{<tt>file</tt><tt>:\<filename\></tt>, low-level file cursor}
@row{<tt>join:\<cursor1\>\&\<cursor2\>[&\<cursor3\>...]</tt>, Join the contents
of multiple cursors together. @notyet{join cursors}}
@row{<tt>config:[\<uri\>]</tt>, iterate through the configuration of an object}
@row{<tt>statistics:[file</tt><tt>:\<filename\>]</tt>, database or file
statistics (key=(string)fieldname\,
data=((uint64_t)value\, (string)printvalue\, (string)description)}
</table>

@section cursor_position Positioning a Cursor

Cursors may be positioned at the beginning of the data source, the end of
the data source, at an exact key within the data source, and near a key
within the data source.  

To position a cursor at the beginning or end of the data source, use the
WT_CURSOR::first and WT_CURSOR::last methods:

@dontinclude ex_cursor.c

@skip home
@skipline int
@until }
@until }

@skipline int
@until }
@until }

To move a cursor forward or backward in the data source, use the cursor
WT_CURSOR::next and WT_CURSOR::prev methods:

@skipline int
@until }
@until }

@skipline int
@until }
@until }

If the WT_CURSOR::next and WT_CURSOR::prev methods are called on cursors
without a position in the data source, they are positioned at the beginning
or end of the data source, respectively.

To position a cursor at a specific location in the data source, use the
WT_CURSOR::search method:

@skipline int
@until }

To position a cursor at or near a location in the data source, use the
WT_CURSOR::search_near method:

@skipline int
@until }
@until }

@section cursor_writes Inserting and Updating

To insert new data, and optionally update existing data, using a cursor,
use the WT_CURSOR::insert method:

@skipline int
@until }

By default, when inserting into a row-store, the WT_CURSOR::insert method
returns an error if the key already exists in the store, otherwise it
inserts a new key/value pair.  If the <code>overwrite</code> configuration
string is specified to the WT_SESSION::open_cursor method, any previously
existing key/value pair is updated to the new value rather than returning
an error.

By default, when updating an underlying column-store, the WT_CURSOR::insert
method ignores the application's key value, instead, it allocates an unused
record number in the store and returns that record number in the
application's key.  If the <code>overwrite</code> configuration string is
specified to the WT_SESSION::open_cursor method, the application's key
value will be used to specify the record number being inserted or updated.

To update existing data using a cursor, use the WT_CURSOR::update method:

@skipline int
@until }

In all cases, calling WT_CURSOR::update where the key does not already
exist in the store will return an error.

To remove existing data using a cursor, use the WT_CURSOR::remove method:

@skipline int
@until }


@section cursor_error Cursor Position after Error

After any cursor handle method failure, the cursor's position is
undetermined.  Applications that cannot re-position the cursor after
failure must duplicate the cursor before calling a cursor method that will
attempt to re-position the cursor.  @notyet{cursor duplication}

@section cursor_projections Projections

Cursors on tables, column groups, indices and files can return a subset of
columns.  This is done by listing the column names in parenthesis in the
<code>uri</code> parameter to WT_SESSION::open_cursor.  Only the fields
from the listed columns are returned by WT_CURSOR::get_value.

This is particularly useful with index cursors, because if all columns in
the projection are available in the index (including primary key columns,
which are the values of the index), there is no need to access any column
groups.

@section cursor_index Index Cursors

When an index is created for a table, records are inserted into the index
whenever the table is updated.  These records use a different key to the
primary table, as specified when the index is created with the
WT_SESSION::create method.

A cursor opened on an index has the specified index columns as its key,
accessed by WT_CURSOR::set_key and WT_CURSOR::get_key.  The value columns
default to returning the value columns from the table, but this can be
overridden by configuring a projection cursor (see @ref cursor_projections),
which can access the table key columns or a subset of the value columns.

@section cursor_file File Cursors

WiredTiger's schema layer can be bypassed by opening cursors with a \c
"file:" URI, using the name of the underlying file.  This can be useful for
seeing the contents of a column group or index without reading all of the
columns from the table.

For example, if an index becomes inconsistent with its primary, a file
cursor can read from the index without errors (even though some of the keys
that are returned may not exist in the primary).

@section cursor_statistics Statistics Cursors

Cursors can return run-time statistics about the WiredTiger engine as well
as the underlying row- and column-store files.  Each cursor iteration sets
three separate values: the entry's unsigned 64-bit integral value, a
printable string version of that integral value, and a string description
of the entry.

@dontinclude ex_stat.c

@skip home
@skipline int
@until }
@until }

To return run-time statistics about the WiredTiger engine, open a
statistics cursor:

@skipline int
@until }

To return run-time statistics about an underlying file, open a statistics
cursor on the file object:

@skipline int
@until }
 */
