/*!
@page testing WiredTiger testing

WiredTiger uses several different tools for testing WiredTiger, allowing
effective testing of different aspects of reliability.  The testing can
be separated into the following categories:

- Functionality coverage
- Bug regression testing
- Cross platform testing
- Multi-threading testing
- Stress testing
- Static analysis
- Performance testing

The above test dimensions are discussed in more detail below.

Most WiredTiger testing is done automatically using the <a
href="http://jenkins-ci.org/">Jenkins</a> continuous integration testing
framework. This allows us to be confident we maintain support for all
platforms, and don't introduce performance regressions.

@section test_suite Unit Test Suite

WiredTiger functional testing happens via our Python unit test suite. The
Python test suite can be found in the GitHub source tree under test/suite.

The WiredTiger Python test suite is built using a combinations of the
WiredTiger Python API and the Python unittest functionality. It requires at
least Python version 2.6.

The WiredTiger Python test suite implements a set of test cases that can be
run across the different platforms supported by WiredTiger. Each test case
is designed to test a specific functionality in a reproducible way - making
it simple to diagnose errors based on the test suite.

The WiredTiger test suite includes tests that cover:
- Functionality exposed via the WiredTiger API.

- Combinations of configuration settings for WiredTiger APIs. Including both
valid and invalid combinations.

- Bug regression tests that cover previous bugs, and avoid their reintroduction.

The WiredTiger Python test suite can be run in a short period of time
facilitated by running multiple test cases in parallel.

The test suite covers the following areas of functionality:

<b>Schema</b>

- Test different key_format and value_format combinations to WT_SESSION::create.

- Test with combinations of column groups.

- Test with combinations of named columns.

- Test with btree and LSM tree table types.

<b> Data Access and Manipulation Operations</b>

- Insert

- Update

- Delete

- Search

- Search near

- Iterator traversal forwards and reverse

<b>Compression Variations</b>

- Block compression (WT_SESSION::create block_compressor); off, bzip2, snappy,
zlib

- Huffman encoding (WT_SESSION::create huffman_key and huffman_value) for
key, value, both, and none

- Prefix compression (WT_SESSION::create prefix_compression)

- Internal key truncation (WT_SESSION::create internal_key_truncate)

- key_gap

<b>Callbacks</b>

- Custom collator test

- Custom compressor test

- Error and message event callbacks

<b>Transaction and Isolation</b>

Cursor isolation levels: snapshot, read-committed, read-uncommitted.

<b>Command-line Utility</b>

- wt dump

- wt load

- wt salvage

- wt verify

<b>Capacity / Limits Testing.</b>

In any of the above functional tests, where appropriate, we should test:

- multiple (connections, sessions, cursors, etc.)

- capacity testing, e.g. testing 10000 simultaneously opened cursors, etc.

- wherever there are limits, test them.

- wherever there are no limits, run to some reasonable capacity.

- capacity and multiples in combinations

@section testing_threads Multithreading

Multithreaded testing is difficult. For the moment, there is a multithreading
test (in test/thread) written in C that is the primary engine for testing
this. There will be some simple Python tests for multithreading, though this
will not be a primary emphasis. One important issue is that we expect the
failures resulting from the python test base to be mostly repeatable. Adding
a large multithreading component with uncontrolled interactions is in
opposition to this goal. We will be periodically evaluating other ways to
repeatably test multithreaded behavior.

@section testing_stress Stress Testing

Similarly, stress testing is mostly handled by the test/format tool. Stress
tests can take significant time to run, which goes against a goal of having
a reasonable amount of time to run the entire suite (that is, less than
several days!)

@section testing_performance Performance Testing

We test performance using the wtperf tool, running a variety of configurations
on every push, and tracking any performance regressions.

@section testing_static Static analysis

Static analysis for WiredTiger is done using two tools:

- The <a href="https://www.coverity.com/">Coverity,
Inc.</a>software analysis tool; current results and historic defect
reports are available at <a
href="https://scan.coverity.com/projects/1018">Coverity's WiredTiger
page</a>.

- The Gimpel Software <a
href="http://www.gimpel.com/html/flex.htm">FlexeLint</a> implementation
of the UNIX lint tool.

 */
